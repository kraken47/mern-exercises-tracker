{"version":3,"sources":["component/navbar.component.js","component/exercise-list.component.js","component/edit-exercise.component.js","component/create-exercise.component.js","component/create-user.component.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","Component","Exercises","EditExercises","CreateExercises","props","onChangeUsername","bind","onChangeDescription","onChangeDuration","onChangeDate","onSubmit","state","username","description","duration","date","Date","users","this","setState","e","target","value","preventDefault","exercise","console","log","window","location","ref","required","onChange","map","user","key","type","selected","oneChangeDate","axios","post","then","res","data","App","path","exact","component","ExercisesList","EditExercise","CreateExercise","CreateUser","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c464d5c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class Navbar extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\r\n            <Link to =\"/\" className=\"navbar-brand\">ExcerTracker</Link>\r\n            <div className=\"collapse navbar-collapse\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"navbar-item\">\r\n            <Link to=\"/\" className=\"nav-link\">Exercises</Link>\r\n            </li>\r\n            <li className=\"navbar-item\">\r\n            <Link to=\"/create\" className=\"nav-link\">Create Exercise Log</Link>\r\n            </li>\r\n            <li className=\"navbar-item\">\r\n            <Link to=\"/user\" className=\"nav-link\">Create User</Link>\r\n            </li>\r\n            </ul>\r\n            </div>\r\n            </nav>\r\n        )\r\n        \r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Exercises extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>You are on the Exercises List component!</p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class EditExercises extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>You are on the Edit Exercises List component!</p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nexport default class CreateExercises extends Component {\r\nconstructor(props) {\r\n    super(props);\r\n\r\n    this.onChangeUsername = this.onChangeUsername.bind(this);\r\n    this.onChangeDescription = this.onChangeDescription.bind(this);\r\n    this.onChangeDuration = this.onChangeDuration.bind(this);\r\n    this.onChangeDate = this.onChangeDate.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    this.state = {\r\n        username: '',\r\n        description: '',\r\n        duration: 0,\r\n        date: new Date(),\r\n        users: []\r\n    }\r\n}\r\n\r\ncomponentDidMount() {\r\n    this.setState({\r\n        users: ['test users'],\r\n        username: 'test user'\r\n    })\r\n}\r\n\r\nonChangeUsername(e) {\r\n    this.setState({\r\n        username: e.target.value\r\n    })\r\n}\r\n\r\nonChangeDescription(e) {\r\n    this.setState({\r\n        description: e.target.value\r\n    })\r\n}\r\n\r\nonChangeDuration(e) {\r\n    this.setState({\r\n        duration: e.target.value\r\n    })\r\n}\r\n\r\nonChangeDate(date) {\r\n    this.setState({\r\n        date: date\r\n    })\r\n}\r\n\r\nonSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const exercise = {\r\n        username: this.state.username,\r\n        description: this.state.description,\r\n        duration: this.state.duration,\r\n        date: this.state.date\r\n    }\r\n\r\n    console.log(exercise);\r\n    window.location = '/';\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Create New Exercise Log</h3>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label>Username: </label>\r\n                        <select ref=\"userInput\"\r\n                            required\r\n                            className=\"form-control\"\r\n                            value={this.state.username}\r\n                            onChange={this.onChangeUsername}>\r\n                                {\r\n                                this.state.users.map(function (user) {\r\n                                    return <option key={user} value={user}>{user}</option>;\r\n                                })\r\n                            }\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Description </label>\r\n                            <input type=\"text\"\r\n                                required\r\n                                className=\"form-control\"\r\n                                value={this.state.description}\r\n                                onChange={this.onChangeDescription}\r\n                                />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Duration (in minutes): </label>\r\n                            <input type=\"text\"\r\n                                required\r\n                                className=\"form-control\"\r\n                                value={this.state.duration}\r\n                                onChange={this.onChangeDuration}\r\n                                />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label>Date: </label>\r\n                            <div>\r\n                                <DatePicker\r\n                                selected={this.state.date}\r\n                                onChange={this.oneChangeDate}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <input type=\"submit\" value=\"Create Exercise Log\" className=\"btn btn-primary\"/>\r\n                        </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\n\r\n\r\nexport default class CreateExercises extends Component {\r\nconstructor(props) {\r\n    super(props);\r\n\r\n    this.onChangeUsername = this.onChangeUsername.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    this.state = {\r\n        username: '',\r\n    }\r\n}\r\n\r\ncomponentDidMount() {\r\n    this.setState({\r\n        users: ['test-users'],\r\n    })\r\n}\r\n\r\nonChangeUsername(e) {\r\n    this.setState({\r\n        username: e.target.value\r\n    })\r\n}\r\n\r\nonSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const user = {\r\n        username: this.state.username,\r\n        \r\n    }\r\n\r\n    console.log(user);\r\n    axios.post('http://localhost:5000/api/users/add', user)\r\n        .then(res => console.log(res.data))\r\n\r\n\r\n    this.setState({\r\n        username: ''\r\n    })\r\n\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Create New User</h3>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label>Username: </label>\r\n                        <input type=\"text\"\r\n                            required\r\n                            className=\"form-control\"\r\n                            value={this.state.username}\r\n                            onChange={this.onChangeUsername}/>                                                        \r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input type=\"submit\" value=\"Create User\" className=\"btn btn-primary\"/>\r\n                        </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nimport Navbar from \"./component/navbar.component\";\nimport ExercisesList from \"./component/exercise-list.component\";\nimport EditExercise from \"./component/edit-exercise.component\";\nimport CreateExercise from \"./component/create-exercise.component\";\nimport CreateUser from \"./component/create-user.component\"\n\nfunction App() {\n\n  return (\n    <Router>\n      <div className=\"container\">\n      <Navbar />\n      <br/>\n      <Route path=\"/\" exact component={ExercisesList} />\n      <Route path=\"/edit/:slug\" component={EditExercise} />\n      <Route path=\"/create\" component={CreateExercise} />\n      <Route path=\"/user\" component={CreateUser} />\n      </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}